# coding=utf-8
# Python 2 and 3 compatibility
# pip install future
from __future__ import (absolute_import, division,
                        print_function, unicode_literals)
from builtins import *

__author__ = 'dobrogodin'

# This is homework for python ml class lesson 03

# Test
print('Test:')
print(2+3)

# 01 Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).
# Программа должна быть эффективной и не выполнять лишних действий!

print("Четные элементы списка:")
a_list = [int(x) for x in input().split(',')]
print(a_list)
print(a_list[::2])

# 02 Дана строка, состоящая из слов, разделенных пробелами.
# Определите, сколько в ней слов. Используйте для решения задачи метод count.

print("Число слов с строке:")
s = input()
print(s)
print(s.strip().count(' ') + 1)

# 03 Дана строка, состоящая ровно из двух слов, разделенных пробелом. Переставьте эти слова местами.
# Результат запишите в строку и выведите получившуюся строку.
# При решении этой задачи нельзя пользоваться циклами и инструкцией if.

print("Обратный порядок слов:")

s = input().split(' ')
s.reverse()
print(" ".join(s))

# 04 Дана строка, в которой буква h встречается минимум два раза.
# Удалите из этой строки первое и последнее вхождение буквы h, а также все символы, находящиеся между ними

print("удалить первый и последний h и все между ними:")
s = input()
first_h = s.index('h')
last_h = s.rindex('h')
print(s[0:first_h] + ' ' + s[last_h + 1:])

# 05 Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т.д.).
# Если элементов нечетное число, то последний элемент остается на своем месте.

print("перестановка соседних:")
a_List = input().split(',')

for i in range(0, len(a_List) - 1, 2):
    a_List[i], a_List[i+1] = a_List[i+1], a_List[i]
print(a_List)

# 06 Дана строка, в которой буква h встречается как минимум два раза. Разверните последовательность символов,
# заключенную между первым и последнием появлением буквы h, в противоположном порядке.

print("между символами h изменить порядок:")
s = input()

first_h = s.index('h')
last_h = s.rindex('h')

t = s[:first_h + 1] + s[first_h + 1:last_h][::-1] + s[last_h:]
print(t)

# 07 Получите новую строку, вставив между двумя символами исходной строки символ *. Выведите полученную строку.

print("вставить * между символами:")
s = input()
t = ''

for i in range(len(s)):
    t += (s[i] + '*')
t = t[:len(t)-1]
print(t)

print("more elegant:")
s = input()
print(''.join([c + '*' for c in s])[:-1])

# 08 В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка

print("поменять местами минимальный и максимальный:")
n_list = [int(x) for x in input().split(',')]

max_ind, min_ind = n_list.index(max(n_list)), n_list.index(min(n_list))
n_list[max_ind], n_list[min_ind] = n_list[min_ind], n_list[max_ind]
print(n_list)

# 09 Дан список чисел, который может содержать до 100000 чисел. Определите, сколько в нем встречается различных чисел.
# Примечание. Эту задачу на Питоне можно решить в одну строчку.

print("кол-во различных чисел в списке:")
n_list = [int(x) for x in input().split(',')]
print(len(set(n_list)))

# 10 Даны два списка чисел, которые могут содержать до 100000 чисел каждый.
# Посчитайте, сколько чисел содержится одновременно как в первом списке, так и во втором.
# Примечание. Эту задачу на Питоне можно решить в одну строчку.

print("кол-во совпадений в списках:")
n_list_1 = [int(x) for x in input('list 1: ').split(',')]
n_list_2 = [int(x) for x in input('list 2: ').split(',')]
print(len(set(n_list_1).intersection(n_list_2)))

# 11 Во входной строке записана последовательность чисел через пробел. Для каждого числа выведите слово YES
# (в отдельной строке), если это число ранее встречалось в последовательности или NO, если не встречалось.

print("поиск ранее встречавшихся:")
n_list = [int(x) for x in input().split(',')]
n_list_exists = []
res = []
for elem in n_list:
    if elem in n_list_exists:
        res.append('YES')
    else:
        res.append('NO')
        n_list_exists.append(elem)

print(*n_list)
print(*res)

# 12 Во входном файле (вы можете читать данные из файла input.txt) записан текст.
# Словом считается последовательность непробельных символов идущих подряд, слова разделены одним или большим числом
# пробелов или символами конца строки.
# Определите, сколько различных слов содержится в этом тексте.

print("слова из файла:")
input_file = open("input.txt", 'r')


words = input_file.readlines()[0]
words = ' '.join(words.split())
print(words)
unique_words = set(words.split(' '))
print('кол-во уникальных слов: %d' % len(unique_words))

# 13 Аня и Боря любят играть в разноцветные кубики, причем у каждого из них свой набор и в каждом наборе все кубики
# различны по цвету. Однажды дети заинтересовались, сколько существуют цветов таких, что кубики каждого цвета
# присутствуют в обоих наборах. Для этого они занумеровали все цвета случайными числами. На этом их энтузиазм иссяк,
# поэтому вам предлагается помочь им в оставшейся части.
# Номер любого цвета — это целое число в пределах от 0 до  10^9

print("разноцветные кубики:")
m, n = [int(i) for i in input("кол-во кубиков в наборах 1 и 2:").split(',')]
A, B = set(), set()

for i in range(m):
    A.add(int(input("номер цвета в наборе 1:")))
for i in range(n):
    B.add(int(input("номера цвета наборе 2:")))

a_and_b = sorted(A.intersection(B))
only_a = sorted(A.difference(B))
only_b = sorted(B.difference(A))

print("кол-во совпадений: %d" % len(a_and_b))
print("совпадения: ", *a_and_b)
print("кол-во только в первом наборе: %d" % len(only_a))
print("эелементы только первого набора: ", *only_a)
print("кол-во только во втором наборе: %d" % len(only_b))
print("элементы только второго набора: ", *only_b)

# 14 Каждый из N школьников некоторой школы знает  Mi языков. Определите, какие языки знают все школьники и языки,
# которые знает хотя бы один из школьников.
# Входные данные
# Первая строка входных данных содержит количество школьников N. Далее идет N чисел  Mi, после каждого из чисел идет
# Mi строк, содержащих названия языков, которые знает i-й школьник. Длина названий языков не превышает 1000 символов,
# количество различных языков не более 1000.  1≤N≤1000,  1≤Mi≤500.
# Выходные данные
# В первой строке выведите количество языков, которые знаю все школьники.
# Начиная со второй строки - список таких языков. Затем - количество языков, которые знает хотя бы один школьник,
# на следующих строках - список таких языков.

print("школьники и языки:")
n = int(input("Число школьников: "))
# M - list of known languages for one student
# lang_list - list of lists of languages
# a - list of langs that knows at least one student
# b - list of langs that know all students
lang_list = []
a = set()
b = set()
for i in range(1, n + 1):
    m = int(input("Сколько языков знает школьник %d: " % i))
    M = []
    for j in range(1, m + 1):
        M.append(input("Язык %d: " % j))
    lang_list.append(M)

    a = a.union(M)
    if i == 1:
        b = b.union(M)
    else:
        b = b.intersection(M)

print("All languages list: ", *lang_list)
print("Languages that knows at least one student: ", *a)
print("Languages that know everyone: ", *b)

